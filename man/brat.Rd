% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brat.R, R/bradget.R
\docType{package}
\name{brat}
\alias{brat}
\alias{brat-package}
\alias{bratOutput}
\alias{renderBrat}
\alias{bradget}
\title{Create brat htmlwidget}
\usage{
brat(doc_data = list(), coll_data = list(), width = NULL, height = NULL)

bratOutput(outputId, width = "100\%", height = "400px")

renderBrat(expr, env = parent.frame(), quoted = FALSE)

bradget(txt_file, ann_file = with_ext(txt_file, "ann"), coll_data)
}
\arguments{
\item{doc_data}{Data to be passed into widget.}

\item{coll_data}{bla bla}

\item{width}{The width of the widget.}

\item{height}{The height of the widget.}

\item{outputId}{The ID of the widget.}

\item{expr}{An expression.}

\item{env}{An environment.}

\item{quoted}{A \code{logical} value.}

\item{txt_file}{File with plan text of document to be annotated.}

\item{ann_file}{File with annotations (brat standoff format). If not stated
explicitly, the file is assumed to be in the same directory as txt file,
but with *.ann file extension.}
}
\value{
A \code{AnnotatedPlainTextDocument} object as defined in the NLP package.
}
\description{
The core of the brat R package is a
\href{https://www.htmlwidgets.org/}{htmlwidget} to visualise, create and modify
annotations of spans of text and relations of annotations. The htmlwidget
generated by calling the \code{brat()} function exposes  the functionality for the
JavaScript code of the \href{https://brat.nlplab.org}{brat rapid annotation tool}
to R. It can be used to document annotations by embedding the widget in an R
Markdown document, or to interactively generate new annotations by using the
widget in the context of Shiny apps.
}
\details{
The input data format required by brat is a plain text representation of the
text to be annotated and a standoff format for annotations. The essence of this
standoff format is that annotated spans of text are defined by start and end
character offset positions.

The \code{Annotation} class defined in the
\href{https://CRAN.R-project.org/package=NLP}{NLP} package is used as a flexible
interface between all kinds of R data formats and a brat-based annotation
process. The NLP package offers an established and mature binary
representation of a standoff format in the R context.

To store annotations on disk, the package uses the brat standoff format for
*.ann files. 'ann'-files are tab-separated definitions of annotations and
relations with four columns. To package includes functionality to facilitate
the conversion between 'ann'-files and \code{NLP::Annotation} objects. See the
documentation of these function for the specification of the ann files.

The core of the htmlwidget are the visualisation and annotation capabilities
of the JavaScript code of the brat rapid annotation tool. The JavaScript code
is part of the htmlwidget, so the minimum size of the htmlwidget is the
size of the JavaScript code (~ 3 GB).

Concerning performance, note that the brat approach to visualise annnotations
relies heavily on Scalable Vector Graphics (SVG). Tokens, annotations and
relations are SVG elements in the resulting HTML document that is part of the
htmlwidget. The time required for renderring the document may make itself
felt, when documents are long or include many annotations.
}
\examples{
if (interactive()){
  brat(
    doc_data = example_doc_data,
    coll_data = example_coll_data
  )
}

# A second example

library(NLP)
merkel_min <- merkel
merkel_min$annotation <- merkel$annotation[merkel$annotation$type == "ner"]
# d <- as.BratDocData(merkel_min)
# collData <- list(
# entity_types = list(list(
#    type = "ner",
#    labels = c("Named Entity", "NE"),
#     bgColor = "#7fa2ff",
#    borderColor = "darken"
#   ))
# )
if (interactive()) brat(doc_data = d, coll_data = collData)
annotation_colors <- RColorBrewer::brewer.pal(8, "Accent")
coll_data <- list(
  entity_types = list(
    entity("Person", bgColor = annotation_colors[1]),
    entity("Organisaation", bgColor = annotation_colors[2]),
    entity("Location", bgColor = annotation_colors[3]),
    entity("Date", bgColor = annotation_colors[4])
  )
)

txt_src <- system.file(package = "brat", "extdata", "sample_data", "edokelley.txt")
ann_src <- system.file(package = "brat", "extdata", "sample_data", "edokelley.ann")
txt_file <- file.path(tempdir(), "edokelley.txt")
ann_file <- file.path(tempdir(), "edokelley.ann")
file.copy(txt_src, txt_file)
file.copy(ann_src, ann_file)

if (interactive()) bradget(txt_file = txt_file, coll_data = coll_data)


# A second example 

library(NLP)
merkel_min <- merkel
merkel_min$annotation <- merkel$annotation[merkel$annotation$type == "ner"]

ann_file <- write_ann_file(x = as.doc_data(merkel_min))
txt_file <- xfun::with_ext(ann_file, ".txt")
cat(merkel_min$content, file = txt_file)

collData <- list(entity_types = list(entity("Person", bgColor = "#7FC97F")))

if (interactive()) bradget(txt_file = txt_file, coll_data = collData)
}
\seealso{
See the documentation of \code{bradget()} and \code{brainy()}
}
\author{
Andreas Blaette
}
